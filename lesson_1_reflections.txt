How did viewing a diff between two versions of a file help you see the bug that was introduced?
It pointed to the exact location within the files where the error occured then displayed the data at the location

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
It will allow you to backtrack in a project. With large projects this is extremely useful when trying to trace the
source of bug. After making multiple changes to a program it becomes very difficult to pinpoint the exact modification
that created a bug. If the programer knows that a previous version was working correctly he/she can then go through
each modification from that working version to debug their code.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
Pros - Big changes aren't left unsaved, can cut down the amount of saved versions, a bad modification is auto saved
Cons - Programmer has to remember to stay ontop of commits, big changes can go unsaved, programmer has to know when a
commit is appopriate an when it's unnecessary

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Each app is directed at a certain audience for a specific purpose. Git, for example, is idle for programmming because it
allows the user to save the entire project with the most recent version of every file it contains. This protects the
devlopers from having a project full of files that are saved at different intervals throughout the creatation process.
Google Docs on the other hand is aimed more towards inidivual file storage. A user would generally be concerened
with only one file at a time, therefore saving and updating every other file along with the one being modidified would 
be unnecessary.

How can you use the commands git log and git diff to view the history of files?
git log displays all the commits made to a project inlude its commit ID, date/time, author and commit message. Using
the git log command a user can obtain the commit id of two versions that they would like compare and can then execute a
comparison using the git diff command alond with the two files being analyzed.

How might using version control make you more confident to make changes that could break something?
It gives the user the ability to backtrack and undo any mistake made to the code. The user can also choose to debug
their code by using the git checkout command to revert back to a working version of the project, and using the 
git checkout command again to step through each modified version of the project until the defected modification can be
isolated. Using this technique ensures the user that any and all modifications (potential bugs) can be undone, allowing
the user to confidentally implement changes to the project without having to worry about perminately effecting it.

Now that you have your workspace set up, what do you want to try using Git for?
Creating, modifying, updating, merging... my projects that I work on alone and ones that I work on in group. Being able
to master the git commands will simplfy aspects of programming that can be very problematic and time consuming which
will allow to me to focus more on the project itself rather then saving/updating changes.