What happens when you initialize a repository? Why do you need to do it?

It creates a master branch and marks all the files in the directory as unmarked, which means they're files that haven't
been added to the repository via commit. Initailizing a repository creates a master branch in the current directory
which means that all files within the current directory an sub-directories will be included in the commit.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area contains all the files that will be committed from the working directory to the repository, files
can be individually added and removed from the staging area. This allows the programming to makes changes to multuple
files all at once and the commit them seperately, which in turn could be very helpful in the debugging process.

How can you use the staging area to make sure you have one commit per logical change?

To check which files are added to the staging area the command git status is used. If any unwanted files are in the
staging area they can be removed using the git reset file.name command. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When more than one person is working on a prjoect at time, branches can be used to help organize and seperate 
everyones work until they are ready to be merged.

How do the diagrams help you visualize the branch structure?
The diagrams help highlight the commit time line for each of the branches and also allows users to identify each
individual branch. Using the diagram, not only can the numnber of branches be determined but also reachability of
each branch, that is, the accessability of one branch to another via a common commit.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The branch specified is merged into the branch that is currently being checked-out, and the name of the merged branch
is the same as what branch was being checked-out prior to the merge. The new branch is a product of the two branches
being merged and thier most recent commin commit. All lines that we're removed since the previous commit are not
included in the merge, all lines that were added, modified or the same in comparison to the two merging branch along
with their common commit with be included in the new merged branch. The diagram representation indicates that the
merged branch contains all the previous commits from both branches all the way back to their shared commit.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Using automatic merging Git will be able to create a new branch that is a product of everything that was modified,
added or untouched in each individual branch with respect to the commom commit and it's opposing branch. Anything
removed since the most recent common commit will not be including in the new merge. Auto merging is a quick
way to merge all obvious changes but can not complete a merge when both branches have made different changegs to
the same file or line. In this case the user will have to manually go through the file(s) that's creating the 
merging conflict and decide which version of the code will be implemented in the new branch. This allows the user
to compare both implementations side by side as the file trying to be merged will now contain the code from each
branch and along with the code from the branch of their most recent common commit. Being able to see what the code
originally looked like allows the user to isolate the changes made in each branch to make a decision on what should
be included in the final merged branch. The down side to manually merging is that it is very tidious, and with
large projects with multiple changes in each branch, manually changing every file can be very time consuming.